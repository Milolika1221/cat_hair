# services/image_processing_service.py

import asyncio
import base64
import json
import os
import io
from datetime import datetime
from typing import Dict, Optional, List, Any
import logging

import aiohttp
from PIL import Image as PILImage
import aiofiles

from cat_server.api.schemas import (
    ImageData,
    NeuralNetworkRequest,
    ProcessingResult,
    ProcessingError,
    ProcessingException,
    ImageProcessingResponse,
    ValidationResult,
)
from cat_server.domain.dto import NeuralNetworkResponse, AnalysisResult
from cat_server.infrastructure.repositories import ICatsRepository, ICatImagesRepository, ICatCharacteristicsRepository
from cat_server.services.user_session_service import UserSessionService

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

class NeuralNetworkClient:
    def __init__(self, base_url : str, timeout : int = 60):
        self.base_url = base_url
        self.timeout = timeout
        logger.info(f"üîß NeuralNetworkClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å URL: {base_url}, timeout: {timeout}")

    async def analyze_and_process_image(self, request : NeuralNetworkRequest) -> NeuralNetworkResponse | None :
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å: session_id={request.session_id}, cat_id={request.cat_id}")
        async with aiohttp.ClientSession() as session :
            form_data = aiohttp.FormData()
            for image in request.images:
                form_data.add_field(
                    name='image',
                    value=image.data,
                    filename=f'{image.filename}',
                    content_type=f'image/{image.format.lower()}'
                )

            metadata = {
                'session_id' : request.session_id,
                'cat_id' : request.cat_id,
                'processed_at' : request.processing_type,
                'total_image' : len(request.images),
                'image_metadata' : [
                    {
                        'filename' : img.filename,
                        'format' : img.format,
                        'size' : img.size,
                        'resolution' : img.resolution
                    } for img in request.images
                ]
            }
            form_data.add_field('metadata', json.dumps(metadata))
            try :
                logger.debug(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {self.base_url}")
                async with session.post(
                        f'{self.base_url}',
                        data=form_data,
                        timeout=aiohttp.ClientTimeout(total=self.timeout)
                ) as response :
                    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: —Å—Ç–∞—Ç—É—Å {response.status}")
                    if response.status == 200 :
                        response_data = await response.json()
                        logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {response_data}")
                        return self._parse_success_response(response_data)
                    else:
                        await self._handle_http_error(response)
            except asyncio.TimeoutError:
                logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
                raise ProcessingException(ProcessingError(
                    error_id="NEURAL_API_TIMEOUT",
                    error_type="neural_api",
                    message="–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∞ –≤–æ–≤—Ä–µ–º—è",
                    suggestions=["–£–≤–µ–ª–∏—á—å—Ç–µ timeout", "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"]
                ))

            except aiohttp.ClientError as e:
                logger.exception("üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
                raise ProcessingException(ProcessingError(
                    error_id="NEURAL_API_CONNECTION",
                    error_type="neural_api",
                    message="–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏",
                    details=str(e),
                    suggestions=["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL API"]
                ))

    @staticmethod
    def _parse_success_response(data: Dict[str, Any]) -> NeuralNetworkResponse:
        logger.debug("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
        analysis_data = data.get('analysis_result', {})
        analysis_result = AnalysisResult(
            color=analysis_data.get('color', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'),
            hair_length=analysis_data.get('hair_length', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'),
            confidence=analysis_data.get('confidence', 0.0),
            analysis_timestamp=datetime.fromisoformat(
                analysis_data.get('analysis_timestamp', datetime.now().isoformat())
            )
        )

        processed_images = []
        for img_data in data.get('processed_images', []):
            image_bytes = base64.b64decode(img_data['data'])
            processed_images.append(ImageData(
                filename=img_data['filename'],
                data=image_bytes,
                size=len(image_bytes),
                format=img_data['format'],
                resolution=img_data.get('resolution'),
                is_processed=True
            ))

        result = NeuralNetworkResponse(
            analysis_result=analysis_result,
            processed_images=processed_images,
            processing_time_ms=data.get('processing_time_ms', 0),
            processing_metadata=data.get('processing_metadata', {})
        )
        logger.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
        return result

    @staticmethod
    async def _handle_http_error(response: aiohttp.ClientResponse):
        error_text = await response.text()
        logger.warning(f"‚ö†Ô∏è –ù–µ–π—Ä–æ—Å–µ—Ç—å –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É: —Å—Ç–∞—Ç—É—Å {response.status}, —Ç–µ–∫—Å—Ç: {error_text}")

        error_mapping = {
            400: ("NEURAL_API_BAD_REQUEST", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"),
            401: ("NEURAL_API_UNAUTHORIZED", "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø"),
            403: ("NEURAL_API_FORBIDDEN", "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"),
            404: ("NEURAL_API_NOT_FOUND", "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"),
            429: ("NEURAL_API_RATE_LIMIT", "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"),
            500: ("NEURAL_API_SERVER_ERROR", "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"),
            503: ("NEURAL_API_UNAVAILABLE", "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        }

        error_id, default_message = error_mapping.get(
            response.status,
            ("NEURAL_API_UNKNOWN", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        )

        raise ProcessingException(ProcessingError(
            error_id=error_id,
            error_type="neural_api",
            message=f"{default_message} (—Å—Ç–∞—Ç—É—Å: {response.status})",
            details=error_text[:500],
            suggestions=NeuralNetworkClient._get_error_suggestions(response.status)
        ))

    @staticmethod
    def _get_error_suggestions(status_code: int) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –æ—à–∏–±–æ–∫"""
        suggestions = {
            400: ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"],
            429: ["–£–º–µ–Ω—å—à–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤", "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"],
            500: ["–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ò–ò —Å–µ—Ä–≤–∏—Å–∞"],
            503: ["–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"]
        }
        return suggestions.get(status_code, ["–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"])


class ImageProcessingService:
    def __init__(
        self,
        user_session_service: UserSessionService,
        cats_repo: ICatsRepository,
        images_repo: ICatImagesRepository,
        characteristics_repo: ICatCharacteristicsRepository,
        neural_client: NeuralNetworkClient,
        upload_dir: str = "uploads"
    ):
        self.user_session_service = user_session_service
        self.cats_repo = cats_repo
        self.images_repo = images_repo
        self.characteristics_repo = characteristics_repo
        self.neural_client = neural_client
        self.upload_dir = upload_dir

        os.makedirs(upload_dir, exist_ok=True)
        logger.info(f"üìÅ ImageProcessingService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, upload_dir: {upload_dir}")

    async def process_images(self, session_id: str, cat_id: int, images_data: List[ImageData]) -> ProcessingResult:
        start_time = datetime.now()
        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: session_id={session_id}, cat_id={cat_id}, images={len(images_data)}")
        try:
            session_images = images_data

            validation = await self.validate_images(session_images)
            if not validation.is_valid:
                logger.warning(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {[err.message for err in validation.errors]}")
                raise ProcessingException(ProcessingError(
                    error_id="VALIDATION_FAILED",
                    error_type="validation",
                    message="–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞",
                    details=str([err.message for err in validation.errors])
                ))

            cat = await self.cats_repo.get_by_id(cat_id)
            if not cat:
                logger.warning(f"üê± –ö–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: cat_id={cat_id}")
                raise ProcessingException(ProcessingError(
                    error_id="CAT_NOT_FOUND",
                    error_type="database",
                    message="–ö–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                ))

            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
            orig_images_info = []
            for image_data in session_images:
                image_info = await self._save_original_image(cat_id, image_data)
                orig_images_info.append(image_info)

            nn_request = NeuralNetworkRequest(
                session_id=session_id,
                cat_id=cat_id,
                images=session_images,
                processing_type='analysis_and_enhancement'
            )
            logger.info("üß† –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å...")
            nn_response = await self.neural_client.analyze_and_process_image(nn_request)

            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
            processed_images_info = []
            for processed_image in nn_response.processed_images:
                image_info = await self._save_processed_image(cat_id, processed_image)
                processed_images_info.append(image_info)

            logger.info("üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–æ—Ç–∞ –≤ –ë–î...")
            characteristic = await self.characteristics_repo.create(
                cat_id=cat_id,
                color=nn_response.analysis_result.color,
                hair_length=nn_response.analysis_result.hair_length,
                confidence_level=nn_response.analysis_result.confidence,
                analyzed_at=nn_response.analysis_result.analysis_timestamp
            )

            logger.info("üì¶ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
            processed_responses = [
                ImageProcessingResponse.from_image_data(img, 'enhanced')
                for img in nn_response.processed_images
            ]

            processing_time_ms = int((datetime.now() - start_time).total_seconds() * 1000)
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: –≤—Ä–µ–º—è={processing_time_ms}ms")

            return ProcessingResult(
                session_id=session_id,
                cat_id=cat.id,
                characteristics=nn_response.analysis_result,
                processed_images=processed_responses,
                processing_time_ms=processing_time_ms,
                status='completed',
                error=None
            )
        except ProcessingException as e:
            logger.warning(f"‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π (–æ–∂–∏–¥–∞–µ–º–æ–π): {e.error.message}")
            processing_time_ms = int((datetime.now() - start_time).total_seconds() * 1000)
            return ProcessingResult(
                session_id=session_id,
                cat_id=cat_id,
                processed_images=[],
                processing_time_ms=processing_time_ms,
                status='error',
                error=e.error  # –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫—É, –Ω–µ –æ–±—ä–µ–∫—Ç ProcessingException
            )
        except Exception as e:
            logger.exception("üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            processing_time_ms = int((datetime.now() - start_time).total_seconds() * 1000)
            return ProcessingResult(
                session_id=session_id,
                cat_id=cat_id,
                processed_images=[],
                processing_time_ms=processing_time_ms,
                status='error',
                error=ProcessingError(
                    error_id="UNKNOWN_ERROR",
                    error_type="system",
                    message="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                    details=str(e)
                )
            )

    @staticmethod
    async def get_processing_result(self, cat_id: int) -> Optional[ProcessingResult] | None:
        logger.debug(f"üîç –ó–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è cat_id={cat_id}")
        return None

    async def _save_original_image(self, cat_id: int, image_data: ImageData) -> dict:
        cat_dir = os.path.join(self.upload_dir, str(cat_id), "original")
        os.makedirs(cat_dir, exist_ok=True)

        file_path = os.path.join(cat_dir, image_data.filename)
        async with aiofiles.open(file_path, 'wb') as f:
            await f.write(image_data.data)

        image_record = await self.images_repo.create(
            cat_id=cat_id,
            file_name=image_data.filename,
            file_path=file_path,
            file_size=image_data.size,
            resolution=image_data.resolution,
            format=image_data.format,
            uploaded_at=datetime.now()
        )

        logger.debug(f"üíæ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
        return {"id": image_record.id, "path": file_path}

    async def _save_processed_image(self, cat_id: int, image_data: ImageData) -> dict:
        cat_dir = os.path.join(self.upload_dir, str(cat_id), "processed")
        os.makedirs(cat_dir, exist_ok=True)

        file_path = os.path.join(cat_dir, image_data.filename)
        async with aiofiles.open(file_path, 'wb') as f:
            await f.write(image_data.data)

        image_record = await self.images_repo.create(
            cat_id=cat_id,
            file_name=image_data.filename,
            file_path=file_path,
            file_size=image_data.size,
            resolution=image_data.resolution,
            format=image_data.format,
            uploaded_at=datetime.now()
        )
        logger.debug(f"üíæ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
        return {"id": image_record.id, "path": file_path}

    @staticmethod
    async def validate_images(images_data: List[ImageData]) -> ValidationResult:
        logger.debug("üîç –ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        errors = []

        for image in images_data:
            if image.size > 10 * 1024 * 1024:  # 10MB
                errors.append(ProcessingError(
                    error_id="VALIDATION_SIZE",
                    error_type="validation",
                    message=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.filename} –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10MB",
                    suggestions=["–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 10MB"]
                ))
                continue

            try:
                with PILImage.open(io.BytesIO(image.data)) as img:
                    width, height = img.size
                    if width < 640 or height < 480:
                        errors.append(ProcessingError(
                            error_id="VALIDATION_RESOLUTION",
                            error_type="validation",
                            message=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image.filename} –∏–º–µ–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ",
                            details=f"–¢–µ–∫—É—â–µ–µ: {width}x{height}, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: 640x480",
                            suggestions=["–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º"]
                        ))

                    image.resolution = f"{width}x{height}"

            except Exception as e:
                errors.append(ProcessingError(
                    error_id="VALIDATION_FORMAT",
                    error_type="validation",
                    message=f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image.filename}",
                    details=str(e),
                    suggestions=["–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç JPEG –∏–ª–∏ PNG"]
                ))

        logger.debug(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—à–∏–±–æ–∫={len(errors)}")
        return ValidationResult(
            is_valid=len(errors) == 0,
            errors=errors
        )